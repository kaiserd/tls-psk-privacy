<?xml version="1.0" encoding="UTF-8"?>

<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [

<!ENTITY rfc2119 PUBLIC ''
   'http://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.2119.xml'>
<!ENTITY rfc8446 PUBLIC ''
   'http://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.8446.xml'>

<!ENTITY I-D.ietf-tls-esni PUBLIC ''
   "http://xml2rfc.ietf.org/public/rfc/bibxml3/reference.I-D.ietf-tls-esni.xml">
<!ENTITY rfc7301 PUBLIC ''
   'http://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.7301.xml'>
]>

<?xml-stylesheet type='text/xsl' href='rfc2629.xslt' ?>
<?rfc compact="yes"?>
<?rfc toc="yes"?>
<?rfc symrefs="yes"?>
<?rfc sortrefs="yes"?>

<!-- Expand crefs and put them inline -->
<?rfc comments='yes' ?>
<?rfc inline='yes' ?>

<rfc category="std"
     docName="draft-kaiser-tls-psk-privacy-00"
     ipr="trust200902">

<front>
    <title abbrev="TLS 1.3 PSK Priv">
      Privacy-Preserving PSK-ID for TLS 1.3
    </title>

   <author fullname="Daniel Kaiser" initials="D." surname="Kaiser">
      <organization>University of Luxembourg</organization>
      <address>
        <postal>
          <street>6, avenue de la Fonte</street>
          <city>Esch-sur-Alzette</city>
          <code>4364</code>
          <region></region>
          <country>Luxembourg</country>
        </postal>
        <email>daniel.kaiser@uni.lu</email>
        <uri>https://secan-lab.uni.lu/</uri>
      </address>
    </author>

   <author fullname="Christian Huitema" initials="C." surname="Huitema">
      <organization>Private Octopus Inc.</organization>
      <address>
        <postal>
          <street></street>
          <city>Friday Harbor</city>
          <code>98250</code>
          <region>WA</region>
          <country>U.S.A.</country>
        </postal>
        <email>huitema@huitema.net</email>
        <uri>http://privateoctopus.com/</uri>
      </address>
    </author>


    <date year="2019" />

    <abstract>
<t>
  This document introduces privacy-preserving ephemeral identifiers as PSK identities,
  which are time-based and only interpretable by an authorized peer.
</t>

<t>
  Ephemeral PSK identities are part of a set of TLS privacy enhancements, which in its entirety
  allows the TLS 1.3 handshake to support private mutual authentication, meaning the endpoints authenticate each other
  while only disclosing their identities to their respective peer if the peer actually is who it claims to be.
  Private mutual authentication is especially desired for privacy preserving applications
  in which devices can act as both client and server.
</t>

    </abstract>
  </front>

<middle>
<section title="Introduction">
<t>
  TLS 1.3 <xref target="RFC8446" /> specifies how session keys can be derived from Pre Shared Keys (PSK). In that mode,
  the PSK proposed by clients and selected by servers are identified by PSK identifiers. The specification envisages
  two types of PSK: keys that are obtained during a session establishment and can be used for session resumption;
  and keys that are established out of band. The  latter type of key is typically valid for a significant time. We
  are concerned that if the key identifier remains constant for a long period of time, it can be used for
  tracking the client and server.
</t>

<t>
  This document defines ephemeral PSK identifiers for TLS 1.3 <xref target="RFC8446" />.
  These identifiers allow private mutual authentication when using the PSK based handshake.
</t>

<t>
  Besides PSK indentifiers, there may be other data sent during the handshake that could be used to
  track client or servers. Obviously, the handshake privacy will only be achieved if the clients and
  servers refrain from providing such data, as explained in <xref target="mess-id" />.
</t>

<section title="Requirements">
<t>
  The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
  "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this
  document are to be interpreted as described in <xref target="RFC2119" />.
</t>
</section>
</section>

<section title="TLS 1.3 Handshake Supporting Privacy-Preserving PSK-IDs" anchor="priv-auth">

<t>
  A client that wants to negotiate a TLS 1.3 session using ephemeral PSK-IDs
  MUST generate an ephemeral PSK identity as defined in <xref target="eph-id-gen" /> and
  send a pre_shared_key extension containing this ephemeral PSK ID.
</t>
<t>
  [[TODO: Should there be an indication that lets the server know the client wants to establish a session using ephemeral PSK IDs?
  As currently described, the server needs to check both the standard PSK IDs and the eph ID table.]]
</t>

<t>
  A server supporting ephemeral PSK-IDs receiving a pre_shared_key extension
  containing an ephemeral PSK identity for the chosen PSK will process it according to <xref target="eph-id-ver" />.
  If the server does not have a matching PSK, it will proceed in same way as when not having a PSK matching any standard PSK ID.
</t>

<t>
  The following diagram illustrates a TLS 1.3 handshake using the pre_shared_key extension. The diagram is based on
  the PSK handshake diagram in <xref target="RFC8446" /> Section 2.2.
  The handshake does not comprise any messages or extensions that directly or indirectly hold the identity of either endpoint, e.g. certificates.
  The new semantics of the identify field within the pre_shared_key extension are specified in <xref target="eph-id" />.
</t>

<t>
<figure>
<artwork>
       Client                                           Server

Key  ^ ClientHello
Exch | + key_share*
     | + psk_key_exchange_modes*
     v + pre_shared_key*  --------&gt;
                                               ServerHello  ^ Key
                                              + key_share*  | Exch
                                     + pre_shared_key*  v
                                     {EncryptedExtensions}  ^  Server
                                                            v  Params
                                                 {Finished} ^  Auth
                                                            v
                             &lt;-------- [Application Data*]
Auth ^
     v {Finished}            --------&gt;
       [Application Data]    &lt;-------&gt; [Application Data]
</artwork>
</figure>
</t>

</section>

<section title="Ephemeral PSK Identities" anchor="eph-id">

  <t>
    PSK identities are used for PSK handshakes, as defined in section 2.2. of
    <xref target="RFC8446" />. This section introduces two classes of PSK:
    session tickets, which the are sent by servers as a means for efficiently establishing subsequent connections,
    and PSKs that are provisioned out-of-band. In the out-of-band case,
    the server is expected to provision the PSK Identity and the
    KDF hash algorithm as well.
</t>
<t>
   PSK identities are sent via the PreSharedKeyExtension
    specified in <xref target="RFC8446" /> Section 4.2.11, which specifies 
    the following syntax:
  </t>

<t>
<figure>
<artwork>
  struct {
    opaque identity&lt;1..2^16-1&gt;;
    uint32 obfuscated_ticket_age;
  } PskIdentity;
</artwork>
</figure>
</t>

<t>
   Ephemeral PSK Identities follow this syntax, with two requirements:
</t>
<t>
<list style="numbers">
<t>
The obfuscated_ticket_age is set to the value 0;
</t>
<t>
The identity is composed as specified in <xref target="eph-id-gen" />.
</t>
</list>
</t>

<section title="Generating Ephemeral PSK Identities" anchor="eph-id-gen">


  <t>
    Ephemeral PSK Identifiers are calculated as follows.
  </t>
<t>
 <figure>
   <artwork>
  original_psk_identity = PSK ID provisioned with the PSK
  timestamp = 64 bit Unix GMT time
  seed = 56 most significant bits of timestamp padded with 0s
  ephemeral_early_secret = HKDF-Extract(PSK, seed)
  ephemeral_identity = HKDF-Expand-Label(ephemeral_early_secret, 
                                         "eph-id",
                                         original_psk_identity,
                                         hash.length)
</artwork>
</figure>
</t>

<t>
  [[For efficiency reasons, we could also use ephemeral_identity = HKDF-Expand-Label(PSK, seed, "eph-id", hash.length),
  which would be similar to establishing session tickets;
  or even just HMAC(seed, PSK). But first generating a separate secret fits better into the TLS 1.3 key schedule.]]
</t>

</section>

<section title="Verifying Ephemeral PSK Identities" anchor="eph-id-ver">

<t>
  A server supporting ephemeral PSK-IDs receiving a pre_shared_key extension
  checks
  <list style="numbers">
  <t>
    if the provided key identities match valid standard PSKs and if not,
  </t>
  <t>
    if the provided key identities are valid ephemeral PSKs.
  </t>
  </list>
  If a match has been found, the server sends back a pre_shared_key extension containing the respective PSK Identity.
  If the server operates in private authentication mode only, it will not have standard PSK IDs
  [[an exception to this are standard PSK IDs associated with ESNI keys.]].
</t>
  
<t>
  When checking the validity of ephemeral PSK identities,
  the server MUST also take the two surrounding time intervals into consideration when checking ephemeral PSK Identities.
</t>

<t>
  In case of heavily skewed clocks, the connection establishment fails even if both parties hold valid PSKs.
  [[This problem could be mitigated by prepending the seed to the ephemeral identity. However, this mitigation technique would
  allow tracking heavily skewed clocks.]]
</t>

<t>
  Servers SHOULD compute a hash table mapping all ephemeral identities valid in
  the current time interval to the corresponding PSKs.
  Servers SHOULD maintain hash tables for the surrounding time intervals as well.
  This allows checking in O(1) and thus mitigates DoS attacks.
</t>
</section>

</section>

<section title="Design Considerations" >

<section title="Minimizing Server Load" >
<t>
The proposal encodes the PSK identity as a hash of the PSK and a nonce, and uses a
rounded version of the current time as a the nonce. An alternative design would 
compose the identity by encoding both the nonce and a hash of the nonce.
</t>
<t>
We constrain the nonce to be time based. This limits the cost of identity retrieval at the
server. In the general case, a server managing N clients with N provisioned identities
would have to perform O(N) hash operations to assess whether one of the resulting
hashes matches the incoming identity. If the nonce is time based and varies once per
time interval T, the server only has to perform these O(N) computations once per interval T.
After that, each key identity can be retrieved in O(1) operations, as explained in
<xref target="eph-id-ver" />.
</t>

</section>

<section title="Four Minutes Interval" >
<t>
In <xref target="eph-id-gen" /> we constrain the nonce to be the 64 bit Unix time, with the
least significant 8 bits set to zero. This sets the nonce interval to 4 minutes and
16 seconds. This choice is based on a tradeoff between three considerations:
</t>
<t>
<list style="symbols">
<t>
With shorter intervals, the server needs to recompute the O(N) hashes more often,
</t>
<t>
With longer intervals, there is a risk that a mobile client will issue a second
connection request within the same interval but from a different location.
</t>
<t>
If client and server clocks are slightly out of sync, very short intervals could result
in frequent connection failures.
</t>
</list>
</t>
</section>

<section title="Preventing Use Of Rainbow Tables" >
<t>
All clients of a given server will use the same nonce at the same
time. That nonce is predictable by attackers. If the ephemeral ID was just
a hash of the key and the nonce, attackers could build "rainbow tables".
They would precompute the hash of the commonly use passwords or pass phrases
with an upcoming nonce, and then test whether a matching value was used
by any client using ephemeral ID.
</t>
<t>
In our design, the ephemeral identity depends on the "original PSK identity"
as well as the nonce and the PSK. The original PSK identity is provisioned
at the same time as the PSK, and is unique to a client. Attackers will have
to perform specific precomputations for every client, and cannot just
precompute hashes and see whether a particular client uses it.
</t>
</section>

<section title="Other Privacy Issues" anchor="mess-id">
  <t>
Ephemeral PSK Identities contribute to client privacy, but they are not sufficient to
guarantee it. The client will not use a constant PSK Identity, and that particular
protocol element will not be used to track it, but there are other revealing elements in
the TLS Handshake, such as:  
  </t>
  <t>
<list style="symbols">
<t>
The Server Name Indication (SNI) provides a clear text indication of the identity of the
server. This is being addressed by the Encrypted SNI (ESNI) extension design
<xref target="I-D.ietf-tls-esni"/>.
</t>
<t>
The Application-Layer Protocol Negotiation (ALPN) extension <xref target="RFC7301" /> reveals
the application used by client and servers.
</t>
<t>
Details of algorithm choices, choice of extensions and ordering of extensions can be
used to fingerprint the client.
</t>
</list>
</t>
<t>
This probably is not an exhaustive list. The purpose of this document is to address the specific
issue of tracking through slowly changing PSK Identities. We expect that ESNI and other efforts
will eventually address these other issues.
</t>
</section>

</section>


<section title="Security Considerations" anchor="security">

<section title="Client and Server Privacy" >
<t>
The PSK modes of TLS provide the client and server with mutual authentication.
In TLS 1.3, it is possible for the client to provide both a PSK extension and a
Key Share extension. This can be used for example to combine PSK and ECDH in
the psk_dhe_ke mode, per section 4.2.9 of <xref target="RFC8446"/>, in order
to combine PSK authentication with forward secrecy. It can also be used to
negotiate an ECDH handshake if the key identifier is not recognized.
</t>
<t>
Implementations SHOULD be aware of this issue, and SHOULD make an explicit
decision about what to do if the PSK is not recognized and the peer is not
authenticated. In many applications, the proper response will be to drop the
connection.
</t>
</section>


<section title="Dictionary Attack">
<t>
  The PSK MUST be high in entropy. This is true for PSKs in general,
  but Ephemeral PSK Identities are even more challenging. 
Adversaries can observe a connection attempt, note the value of the nonce, and perform
a dictionary attack, using the Ephemeral PSK Identity value as an oracle. This is
less challenging than trying to reproduce the whole handshake, and will succeed even
if the session was negotiated using the psk_dhe_ke mode.
</t>
<t>
Implementations MUST guarantee that the PSK provides at least 128 bits of entropy.
</t> 
</section>


</section>

<section title="IANA Considerations" anchor="iana">
<t>
    [[TODO]]
</t>
</section>

<section title="Acknowledgments">
    <t>
    </t>
</section>

</middle>

<back>
<references title="Normative References">
  &rfc2119;
  &rfc8446;


</references>
<references title="Informative References">
   &I-D.ietf-tls-esni;
   &rfc7301;

</references>
</back>
</rfc>
